@startuml Mobilna aplikacija Lovec Vue.js

title Mobilna aplikacija Lovec Vue.js

skinparam class {
  backgroundColor white
  borderColor #5FB8EC
  arrowColor black
}
skinparam class<<entity>> {
  backgroundColor #e8f5fc
  borderColor Blue
}
skinparam class<<control>> {
  backgroundColor #fce8e8
  borderColor Red
}
skinparam class<<boundary>> {
  backgroundColor #f2fce8
  borderColor Green
}
skinparam class<<External API>>{
  backgroundColor #f8f0d4
  borderColor Orange
}
skinparam class<<Vue view>>{
  backgroundColor #f8f0d4
  borderColor Orange
}

' skinparam shadowing false
skinparam style strictuml
skinparam defaultTextAlignment center
' skinparam packageStyle rectangle
skinparam groupInheritance 5
hide circle
' hide members

'---------Razredi---------------------------
class TabsPage<<boundary>>
class ToolbarNavigation<<boundary>>

class Router<<control>>{
}

TabsPage --> Router
ToolbarNavigation --> Router

package Views{
  Class SubTabPripravniki<<Vue view>>{
  }

  Class TabRevirji<<Vue view>>{
  }

  Class TabOpazovalnica<<Vue view>>{
  }

  Class SubTabVplen<<Vue view>>{
  }

  Class TabOprema<<Vue view>>{
  }

  Class TabIzkaznica<<Vue view>>{
  }

  Class TabJage<<Vue view>>{
  }

  Class TabIzkaznica<<Vue view>>{
  }

  Class LoginPage<<Vue view>>{
  }
}

Router --> SubTabPripravniki
Router --> TabRevirji
Router --> TabOpazovalnica
Router --> SubTabVplen
Router --> TabOprema
Router --> TabIzkaznica
Router --> TabJage
Router --> TabIzkaznica
Router --> LoginPage

Class FabButton<<Vue component>>{
}
Class CardJaga<<Vue component>>{
}
Class ModalJagaAdd<<Vue component>>{
}
Class ModalJagaDescription<<Vue component>>{
}

TabJage --> FabButton
TabJage --> CardJaga
TabJage --> ModalJagaAdd
TabJage --> ModalJagaDescription

Class GridIzkaznica<<Vue component>>{
}

TabIzkaznica --> GridIzkaznica

Class FabButtonAdd<<Vue component>>{
}
Class ModalOpremaAdd<<Vue component>>{
}
Class CardOpremaDescription<<Vue component>>{
}

TabOprema --> FabButtonAdd
TabOprema --> ModalOpremaAdd
TabOprema --> CardOpremaDescription

' Class FabButtonAdd<<Vue component>>{
' }
Class CardVplen<<Vue component>>{
}
Class ModalVplenAdd<<Vue component>>{
}
Class ModalVplenDescription<<Vue component>>{
}

SubTabVplen --> FabButtonAdd
SubTabVplen --> CardVplen
SubTabVplen --> ModalVplenAdd
SubTabVplen --> ModalVplenDescription

Class MapComponent<<Vue component>>{
}

TabOpazovalnica --> MapComponent

TabRevirji --> MapComponent

' Class FabButtonAdd<<Vue component>>{
' }
Class ModalDnevnikAdd<<Vue component>>{
}
Class CardDnevnikDescription<<Vue component>>{
}

SubTabPripravniki --> FabButtonAdd
SubTabPripravniki --> ModalDnevnikAdd
SubTabPripravniki --> CardDnevnikDescription

' Nove stvari

package Entities {
  ' General use entities
  Class Uporabnik<<entity>> {

  }

  Class Dnevnik<<entity>> {

  }

  Class Druzina<<entity>> {

  }

  Class Jaga<<entity>> {

  }

  Class JWT<<entity>> {

  }

  Class Opazovalnica<<entity>> {

  }

  Class Oprema<<entity>> {
    id: string
    lastnik: string
    naziv: string
    tip: string
    stanje: string
    datum: string
  }

  Class Revir<<entity>> {

  }

  Class Vplen<<entity>> {

  }
  
  ' Admin only entities
}

package Stores {
  Class useLoginStore<<Store>> {
    + uporabnik: Uporabnik
    + isLogged: boolean

    + login(): boolean
    + logout(): boolean
    + getToken(): string
    + getRefreshToken(): string
    + updateToken(): void
    + updateRefreshToken(): void
  }

  ' User preferences: dark mode, language, ...
  ' tukaj jih ze imam definirane v naprej
  Class usePreferencesStore<<Store>> {
    - darkMode: boolean
    - language: string

    + getDarkMode(): boolean
    + getLanguage(): string

    + setDarkMode(): void
    + setLanguage(): void
  }

  Class useOpremaStore<<Store>> {
    + oprema: Oprema[]
    
    + getOprema(): Oprema[]
    + deleteOprema(): boolean
    + postOprema(): Oprema null
    + adminGetOprema(): Oprema[]
    + adminDeleteOprema(): boolean
  }

  useOpremaStore *.. Oprema: uses
  useOpremaStore *.. useRequest: uses
  useOpremaStore *.. usePagination: uses

  Class useVpleniStore<<Store>> {
    + vpleni: Vplen[]
    
  }
}

package Composables {
  Class useAlert<<Composable>> {
    - presentToast(options: AlertOptions): HTMLIonAlertElement
    + errorToast(message: string)
    + warningToast(message: string)
    + successToast(message: string)
    + successToastAction(action, success: string)
  }

  ' WONT DO
  ' Class useCountdown<<Composable>> {

  ' }

  Class "useCRUD<T>"<<Composable>> {
    - items: T[]                 
    - createItem<I>(call: <I, T>(Data: I) => T, addToStart: boolean): T null
    - deleteItem(call: <T>(data: T) => boolean): (item: T) => boolean 
    - updateItem<U = T>(call: <T, U>oldVal?: T, newVal?: U): (original: T, data?: U) => T null 
  }

  Class useDate<<Composable>> {
    -date: Date                 
    -update(newDate: Date string): void 
    -isoDate(): string               
    -getMonth(): string              
    -getWeekdayShort(): string       
    -getDayNumber(): number          
    -addHours(hours: number): void   
    -getTime(): string               
  }

  Class useFormControl<<Composable>> {
    -form: HTMLFormElement null
    -submitForm<T>(call: (el: T) => any, data: T, message?: string): void
  }

  Class useMapElements<<Composable>> {
    -iconOpazovalnica: Icon          
    -iconVplen(zival: string): Icon  
    -iconJaga: Icon                  
  }

  Class useModal<<Composable>> {
    -openModal(component: any, componentProps: object): any 
    -cancelModal<T>(data: T | null): any 
    -confirmModal<T>(data: T | null): any 
    -openSheetModal(component: any, componentProps: object = {}): any 
  }

  Class "usePagination<T>"<<Composable>> {
    + usePagination<T>(fetchFunctionTemplate: (page?: number) => T[], isSinglePage: boolean)
    + items: T[]

    - page: number
    - isMore: boolean

    + fetchMore(): void 
    + refresh(): void
  }

  Class "useRequest<T>"<<Composable>> {
    - baseUrl: string

    - requestLong(method: string, url: string, options: HttpOptions): CapacitorHTTP
    - createAuthenticatedRequest(): <T>(url: string, options: HttpOptions) => APIResponse<T>
    - refreshTokenCall(): APIResponse<JWTTokenPair>
    + request(method: string): T
  }

  ' I think da jih veliko uporabnlja useRequest
  useRequest *.. useLoginStore: uses
  useRequest *.. JWTTokenPair: uses
}

package Types {
  Class "APIResponse<T>" {
    + status: number
    + data: T
    + message: string
  }

  Class JWTTokenPair {
    + token: string
    + refreshToken: string
  }
}

@enduml